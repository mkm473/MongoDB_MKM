Data Set-1

1. How do you find all documents where the field "item" is "Mochas"?

Query:

db.sales.find({ item: "Mochas" });

2. How do you find all items who are less than 15 of price?

Query:

db.sales.find({ price: { $lt: 15 } });

3. How do you find items who are either less than 10 or greater than 20?

Query:

db.sales.find({ $or: [{ price: { $lt: 10 } }, { price: { $gt: 20 } }] });

4. How do you find all documents where the quantity field exists?

Query:

db.sales.find({ quantity: { $exists: true } });

------------------------------------------------------------------------------------

Data Set-2

5. How do you find all documents where the color array contains the value "white"?

Query:

db.products.find({ color: "white" });

6. How do you update the ram of the user named "xTablet" to 24?

Query:

db.products.updateOne(
  { name: "xTablet" }, 
  { $set: { "spec.ram": 24 } }
);

7. How do you find all products and only return their 'spec' field?

Query:

db.products.find({}, { spec: 1, _id: 0 });

8. How do you find all products and sort them by their price in descending order?

Query:

db.products.find().sort({ price: -1 });

9. How do you find the first 2 products, skipping the first one?

Query:

db.products.find().skip(1).limit(2);

10. How do you find all users whose name starts with the letter "S" and price should be greater of 700?

Query:

db.products.find({name: { $regex: /^S/i },price: { $gt: 700 } });

------------------------------------------------------------------------------------

Data Set-1:

11. How do you calculate the total price of all items?

Query:

db.products.aggregate([
  { 
    $group: { 
      _id: null, 
      totalPrice: { $sum: "$price" } 
    } 
  }
]);

12.How do you project only the size field for each items?

Query:

db.sales.find({}, { size: 1, _id: 0 });

13. How do you find items who are Tall size &  group them by item wise?

Query:

db.sales.aggregate([
  { 
    $match: { size: "Tall" } // Filters documents where size is "Tall"
  },
  { 
    $group: { 
      _id: "$item", // Groups by item name
      totalQuantity: { $sum: "$quantity" }, // Sums up the quantity for each item
      avgPrice: { $avg: "$price" } // Calculates average price
    }
  }
]);

14. How do you find the second item when sorted by price in ascending order?

Query:

db.sales.find().sort({ price: 1 }).skip(1).limit(1);

15. How do you group by items and calculate the total number of items and average price in a single aggregation?

Query:

db.sales.aggregate([
  { 
    $group: { 
      _id: "$item",  // Grouping by item
      totalQuantity: { $sum: "$quantity" },  // Summing up total quantity
      avgPrice: { $avg: "$price" }  // Calculating average price
    } 
  }
]);

